name: Build and Publish and Deploy to Server

on:
  push:
    branches:
      - main

env:
  REGISTRY_NAME: ghcr.io/zinrai
  IMAGE_NAME: hello_sample
  CACHE_PATH: /tmp/.buildx-cache-hello_sample

permissions:
  id-token: write
  contents: read
  actions: read
  packages: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-${{ env.CACHE_PATH }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_PATH }}

      - name: Create Docker tag
        run: |
          COMMIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          TAG=${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:$COMMIT_HASH
          echo "DOCKER_TAG=$TAG" >> $GITHUB_ENV
          echo "$TAG" > docker-tag

      - name: Upload Docker tag as artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-tag
          path: docker-tag

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ env.DOCKER_TAG }}
          push: true
          file: Dockerfile
          cache-from: type=local,src=${{ env.CACHE_PATH }}
          cache-to: type=local,dest=${{ env.CACHE_PATH }}-new,mode=max

      - name: Move cache
        run: |
          rm -rf ${{ env.CACHE_PATH }}
          mv ${{ env.CACHE_PATH }}-new ${{ env.CACHE_PATH }}

  deploy-to-server:
    runs-on: ubuntu-latest
    needs:
      - build-and-publish

    steps:
      - name: Download Docker tag from artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-tag
          path: .

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          DOCKER_TAG=$(cat docker-tag)
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "sudo docker pull $DOCKER_TAG"
